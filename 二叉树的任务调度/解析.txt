题目链接：https://leetcode-cn.com/problems/er-cha-shu-ren-wu-diao-du/

解题：
    审题：
        1.题目只有两个cpu，同一任务不能并行；
        2.需要子树运行完才能运行根节点；
    思路：求最短运行时间也就是求最长并行时间（充分利用两个cpu并行节约时间），
    实现：
        1.假定一个节点root，它左子树串行总时间a, 最大并行时间b，同理右子树c, d;
        2.假定该节点a >= c，则该节点总串行时间为root.val + a + c，最大并行时间为(b + d) / 2;
        3.假定左子树能达到最大并行时间b，则左子树是先并行b之后串行a - 2 * b，总耗时a - b;
        4.在左子树串行的a-2b时间内，可以让右子树同时串行，此时右子树需要串行c时间；
        5.若a-2b <= c，即左子树运行完了右子树还不一定结束，就会剩下一部分时间有一台cpu空闲，达不到最大并行时间(a+c)/2，那这种情况
          能不能避免呢？答案是能的，让左子树一开始不要并行b时间，少并行一会（a-c），剩c时间的任务量和右子树一起各自串行，就能让两台
          cpu一直在运行，同时也就达到了最长并行时间；
        6.若a-2b > c，即左子树还没运行完右子树就结束了，也会剩一部分时间有一台cpu空闲，那这种情况能否避免呢？答案是不能的，因为此时
          左子树已经并行了最大并行时间b了，由于“需要子树运行完才能运行根节点”，故此时达不到最大并行时间(a+c)/2，此时的最大并行时间
          为b+c，一定存在一台cpu空闲a-2b-c时间;
        7.递归实现代码。